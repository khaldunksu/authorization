{"version":3,"sources":["components/Fire.js","components/Home.js","components/News.js","components/Profile.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["Fire","Firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Home","style","textAlign","marginTop","class","req","Request","News","state","news","isLoaded","fetch","then","response","json","setState","Object","values","this","className","map","i","title","description","content","href","url","author","publishedAt","src","urlToImage","alt","width","React","Component","Profile","type","onClick","auth","signOut","Login","useState","email","setEmail","password","setPassword","onSubmit","event","preventDefault","signInWithEmailAndPassword","user","catch","error","console","log","name","placeholder","onChange","target","value","App","props","authListener","onAuthStateChanged","id","to","exact","data-toggle","data-target","aria-controls","aria-expanded","aria-label","outline","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.36f7cada.chunk.js","sourcesContent":["import Firebase from 'firebase';\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyA0P0-Yr_A6TTrH46phvuA0vyb_SoX5T8k\",\r\n  authDomain: \"my-firebase-project-10063.firebaseapp.com\",\r\n  databaseURL: \"https://my-firebase-project-10063.firebaseio.com\",\r\n  projectId: \"my-firebase-project-10063\",\r\n  storageBucket: \"my-firebase-project-10063.appspot.com\",\r\n  messagingSenderId: \"19603774294\",\r\n  appId: \"1:19603774294:web:d9014b5dbfca7a6f7a94f7\",\r\n  measurementId: \"G-R8Z8B8VK6C\"\r\n};\r\n// Initialize Firebase\r\nconst Fire =  Firebase.initializeApp(firebaseConfig);\r\nexport default Fire;","import React from 'react';\r\nconst Home=()=>{\r\n    return(\r\n        <h1 style={{textAlign:\"center\",marginTop:\"50px\"}}>\r\n            Enjoy the news from around the world.\r\n        <i class=\"paper plane icon\"></i></h1>\r\n       \r\n    )\r\n}\r\nexport default Home","import React from 'react';\r\nconst url = 'http://newsapi.org/v2/top-headlines?' +\r\n  'country=us&' +\r\n  'apiKey=d8b89ab14a2e4a6fb0ba7ed856e0ee86';\r\nconst req = new Request(url);\r\n\r\nclass News extends React.Component {\r\n  state = {\r\n    news: [],\r\n    isLoaded: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(req)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        this.setState({ news: Object.values(response)[2]});\r\n        this.setState({ isLoaded: false });\r\n      })\r\n  }\r\n  render() {\r\n    const { news, isLoaded} = this.state;\r\n    if (isLoaded) return <div>...Loading</div>\r\n    return (\r\n      <div className=\"container\">\r\n        {news.map(i => (\r\n          <>\r\n            <div className=\"news\">\r\n              <p className=\"title\">{i.title}</p>\r\n              <p className=\"content\">{i.description}</p>\r\n              <p className=\"content\">{i.content?i.content!=='':''}</p>\r\n              <p>More...<a href={i.url} className=\"link\">{i.url}</a></p>\r\n              <hr />\r\n              <p className=\"author\">\r\n                <i class=\"user icon\"></i> {i.author} <i>{i.publishedAt}</i></p>\r\n              <img src={i.urlToImage} alt={i.title} style={{ width: \"80%\" }} />  \r\n            </div>\r\n          </>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default News\r\n\r\n/*fetch(req)\r\n    .then(function(response) {\r\n        console.log(response.json());\r\n    })*/","import React from 'react';\r\nimport Fire from './Fire'\r\nconst Profile=()=>{\r\n    const Logout =()=>{\r\n        Fire.auth().signOut()\r\n\r\n    }\r\n    return(\r\n        <div>\r\n     <h2>Welcome to Profile page!</h2>\r\n     <button class=\"negative ui button\" type=\"submit\" onClick={Logout}>Logout</button>\r\n     </div>\r\n    )\r\n}\r\nexport default Profile","import React,{useState} from 'react';\r\nimport Fire from './Fire';\r\nconst Login =()=>{\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('')\r\n  const handleEmailChange = (event) => {\r\n     setEmail(event.target.value)\r\n  }\r\n\r\n  const handlePasswordChange = (event) => {\r\n     setPassword(event.target.value)\r\n  }\r\n  const submitHandler = (event) => {\r\n    event.preventDefault()\r\n    Fire.auth().signInWithEmailAndPassword(email,password)\r\n    .then(user=>{})\r\n    .catch(error=>{\r\n      console.log(error)\r\n    });\r\n\r\n  }\r\n \r\n    return (\r\n      <div className=\"login\">\r\n        <form class=\"ui form\" onSubmit={submitHandler}>\r\n          <div class=\"field\">\r\n            <label>Username</label>\r\n            <input type=\"text\" name=\"first-name\" placeholder=\"Username\" onChange={handleEmailChange} value={email}/>\r\n          </div>\r\n          <div class=\"field\">\r\n            <label>Password</label>\r\n            <input\r\n             name=\"last-name\"\r\n              placeholder=\"Password\"\r\n              type=\"password\" \r\n              value={password}\r\n              onChange={handlePasswordChange}/>\r\n          </div>\r\n          <button class=\"ui button\" type=\"submit\">Log in</button>\r\n        </form>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\nexport default Login ","import React from 'react';\nimport '../App.css';\nimport Fire from \"./Fire\";\nimport {\n  HashRouter,\n  Route,\n  Switch,\n  NavLink\n} from 'react-router-dom';\nimport Home from \"./Home\"\nimport News from \"./News\"\nimport Profile from \"./Profile\"\nimport Login from \"./Login\"\n\nclass App extends React.Component  {\n  constructor(props){\n    super(props)\n    this.state={\n      user:{}\n    }\n  }\n\n  componentDidMount(){\n    this.authListener()\n  }\n  \n  authListener(){\n    Fire.auth().onAuthStateChanged((user)=>{\n      if(user){\n        this.setState({user})\n      }\n      else{\n        this.setState({user:null})\n      }\n    })\n  }\n render(){\n   return (\n    <div className=\"App\">\n      \n       <HashRouter>\n       <div className=\"pos-f-t\">\n  <div className=\"collapse\" id=\"navbarToggleExternalContent\">\n    <div className=\"bg-dark p-4\">\n    <nav>\n    <ul >\n      <li><NavLink to=\"/\" exact>Home</NavLink></li>\n      <li><NavLink to=\"/news\"  exact>News</NavLink></li>\n      <li><NavLink to=\"/profile\" exact>Profile</NavLink></li>\n      <li><NavLink to=\"/login\" exact>Login</NavLink></li>\n    </ul>\n</nav>\n    </div>\n  </div>\n  <nav className=\"navbar navbar-dark bg-dark\">\n    <button className=\"navbar-toggler\" type=\"button\"\n     data-toggle=\"collapse\" data-target=\"#navbarToggleExternalContent\" \n     aria-controls=\"navbarToggleExternalContent\" aria-expanded=\"false\" \n     aria-label=\"Toggle navigation\" style={{outline:'none'}}>\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n  </nav>\n</div>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/news\" component={News}/>\n          {this.state.user?\n          (<Route  exact path=\"/profile\" component={Profile}/>):\n          (<Route  exact path=\"/login\" component={Login}/>)}\n        </Switch>\n    </HashRouter>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}